Function that multiplies two numbers and returns the output:


int multiply(int a, int b) {
    return a * b;
}



Recursive function for factorial calculation:


int factorial(int n) {
    if (n == 0 || n == 1)
        return 1;
    else
        return n * factorial(n - 1);
}


Function that splits a string into two:

std::pair<std::string, std::string> splitString(const std::string& str, int position) {
    std::string firstPart = str.substr(0, position);
    std::string secondPart = str.substr(position);
    return std::make_pair(firstPart, secondPart);
}



Testing pass-by-reference vs. pass-by-value:

void modifyValue(int a) {  // Pass-by-value
    a = 10;
}

void modifyReference(int &a) {  // Pass-by-reference
    a = 10;
}


Example of Calling Functions:

int main() {
    // Multiplication
    int resultMultiply = multiply(3, 4);

    // Factorial
    int resultFactorial = factorial(5);

    // String splitting
    std::pair<std::string, std::string> splitResult = splitString("hello world", 5);

    // Pass-by-value vs. pass-by-reference
    int value = 5;
    modifyValue(value);  // value remains unchanged
    modifyReference(value);  // value changes to 10

    return 0;
}


SECOND EXAMPLE 

#include <iostream>
#include <string>
#include <utility> // For std::pair

// Function to multiply two integers
int multiply(int a, int b) {
    return a * b;
}

// Recursive function to calculate factorial
int factorial(int n) {
    return (n <= 1) ? 1 : n * factorial(n - 1);
}

// Function to split a string into two parts
std::pair<std::string, std::string> splitString(const std::string& str, int position) {
    return std::make_pair(str.substr(0, position), str.substr(position)); // Directly return the pair
}

// Main function to test the above functions
int main() {
    std::cout << "Multiply: " << multiply(3, 4) << std::endl; // Print multiplication result
    std::cout << "Factorial: " << factorial(5) << std::endl; // Print factorial result

    // String splitting
    std::pair<std::string, std::string> splitResult = splitString("hello", 2); // Specify type explicitly
    std::cout << "Split: " << splitResult.first << ", " << splitResult.second << std::endl; // Print split result

    return 0; // Indicate that the program ended successfully
}
































Function declaration syntax:
The syntax for a function declaration is: return_type function_name(parameter_list); In this example, int is the return type of the function, add is the name of the function, and (int x, int y) is the parameter list that specifies two integer parameters called “x” and “y.”
As an illustration, the function declared by int multiply(int a, int b) takes two integer parameters and returns an integer.

-https://blog.hubspot.com/website/call-a-function-in-c#:~:text=C%2B%2B%20Function%20Declarations%20%26%20Definitions&text=The%20syntax%20for%20a%20function,x”%20and%20“y.”


Write-up Questions:
1. What is the syntax for declaring a function in your language?
In C++, a function is declared by specifying the return type, followed by the function name and parameters in parentheses.

 For example: int add(int a, int b) { return a + b; }.

2. Are there any rules about where the function has to be placed in your code file so that it can run?
Functions must be declared (either defined or prototyped) before they are called in the code. This means you can place function definitions before or after the main function, but you must declare them before any calls.

3. Does your language support recursive functions?
Yes, C++ supports recursive functions, allowing functions to call themselves. This is useful for solving problems that can be broken down into smaller subproblems, like calculating factorials.

4. Can functions in your language accept multiple parameters? Can they be of different data types?
C++ functions can accept multiple parameters, and these parameters can be of different data types. For example, a function can take an int, a double, and a string as parameters.

5. Can functions in your language return multiple values at the same time? How is that implemented? If not, are there ways around that problem? What are they?
C++ does not support returning multiple values directly; however, this can be achieved using structures, classes, or std::tuple. By using these data structures, multiple values can be grouped together and returned as a single entity.

6. Is your language pass-by reference or value? Check your code against outside sources in case there is anything tricky going on (like in Perl).
C++ primarily uses pass-by-value for basic types, meaning a copy of the variable is passed to functions. However, C++ also supports pass-by-reference using the & operator, allowing functions to modify the original variable.

7. Where are the arguments, parameters, and local variables stored (value-on-stack, ref-to-heap-on stack) during execution?
In C++, arguments and local variables are typically stored on the stack. If a function takes a reference or a pointer, the address of the variable may be stored, which refers to a location on the heap if the variable itself is heap-allocated.

8. What are the scoping rules in your language (visibility and lifetime of variables before, during, and after code blocks)?
C++ uses lexical scoping, meaning that the visibility of variables is determined by their location in the source code. Local variables exist within the block they are defined in and are destroyed when the block exits.

9. Are side effects possible? Are there guard rails against side effects?
Yes, side effects are possible in C++, especially when functions modify global variables or passed-by-reference parameters. While there are no strict guardrails, best practices encourage minimizing side effects to enhance code clarity and maintainability.

10. Where are local variable values stored? (on the stack? On the heap?)
Local variable values in C++ are stored on the stack. This storage method ensures efficient allocation and automatic deallocation when the function exits.

